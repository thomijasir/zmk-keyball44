#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow Mods Right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "Homerow Mods Left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
        };
    };

    combos {
        compatible = "zmk,combos";

        screenlock_combo {
            bindings = <&screenlock_mac>;
            key-positions = <42 11>;
        };
    };

    macros {
        screenlock_mac: screenlock_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCMD>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp Q>,
                <&macro_release>,
                <&kp LCMD>,
                <&macro_release>,
                <&kp LCTRL>;

            label = "SCREENLOCK_MAC";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "QWRT";
            bindings = <
&kp ESCAPE      &kp Q             &kp W              &kp E             &kp R              &kp T                       &kp Y            &kp U               &kp I              &kp O               &kp P                 &kp BACKSPACE
&kp CAPS        &hrm_left LALT A  &hrm_left LCTRL S  &hrm_left LCMD D  &hrm_left LSHFT F  &kp G                       &kp H            &hrm_right RSHFT J  &hrm_right RCMD K  &hrm_right LCTRL L  &hrm_right RALT SEMI  &kp SQT
&kp LEFT_SHIFT  &lt 5 Z           &kp X              &kp C             &kp V              &kp B                       &kp N            &lt 4 M             &kp COMMA          &kp DOT             &lt 5 SLASH           &kp RIGHT_SHIFT
&kp LGUI        &kp LALT          &mt LSHFT ESCAPE   &lt 1 SPACE       &lt 3 TAB                     &mt RCTRL ENTER  &lt 2 BACKSPACE                                                                                   &kp DELETE
            >;
        };

        symbol {
            label = "SYM";
            bindings = <
&none   &kp EXCLAMATION       &kp AT_SIGN                   &kp HASH                 &kp DOLLAR               &kp LEFT_PARENTHESIS              &kp RIGHT_PARENTHESIS  &kp AMPERSAND                &kp ASTERISK              &kp PIPE                        &kp NON_US_BACKSLASH   &none
&none   &hrm_left LALT GRAVE  &hrm_left LCTRL SINGLE_QUOTE  &hrm_left LCMD KP_MINUS  &hrm_left LSHFT KP_PLUS  &kp LEFT_BRACE                    &kp RIGHT_BRACE        &hrm_right RSHFT UNDERSCORE  &hrm_right RCMD KP_EQUAL  &hrm_right LCTRL DOUBLE_QUOTES  &hrm_right RALT TILDE  &none
&none   &kp CAPS              &trans                        &trans                   &kp PERCENT              &kp LEFT_BRACKET                  &kp RIGHT_BRACKET      &kp CARET                    &trans                    &trans                          &kp CAPS               &none
&trans  &trans                &trans                        &trans                   &trans                                             &trans  &trans                                                                                                                               &trans
            >;
        };

        number_nav {
            label = "NUM";
            bindings = <
&none   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5              &kp NUMBER_6    &kp NUMBER_7                 &kp NUMBER_8              &kp NUMBER_9            &kp NUMBER_0  &none
&none   &kp LALT      &kp LCTRL     &kp LCMD      &kp LSHFT     &kp TAB                   &kp LEFT_ARROW  &hrm_right LSHFT DOWN_ARROW  &hrm_right RCMD UP_ARROW  &hrm_right RCTRL RIGHT  &kp RALT      &none
&none   &kp CAPS      &none         &none         &none         &none                     &none           &mkp LCLK                    &mkp RCLK                 &mkp MCLK               &kp CAPS      &none
&trans  &trans        &kp F1        &kp F5        &kp F12                         &trans  &trans                                                                                                       &trans
            >;
        };

        mouse {
            label = "MOUSE";
            bindings = <
&none   &kp N1    &kp N2     &kp N3        &kp N4           &kp N5                   &kp N6            &kp N7                &kp N8                &kp N9     &kp N0    &none
&none   &kp LALT  &kp LCTRL  &kp LCMD      &kp LSHFT        &kp TAB                  &kp PAGE_UP       &mkp LCLK             &mkp RCLK             &mkp MCLK  &none     &none
&none   &kp CAPS  &none      &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_MUTE               &kp PAGE_DOWN     &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &none      &kp CAPS  &none
&trans  &trans    &trans     &trans        &trans                           &kp F11  &kp RC(UP_ARROW)                                                                   &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &mkp LCLK  &mkp RCLK  &mkp MCLK  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans     &trans     &trans     &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                           &trans
            >;
        };

        function {
            label = "FUN";
            bindings = <
&none   &kp F1  &kp F2   &kp F3   &kp F4   &none              &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &bootloader
&none   &kp F5  &kp F6   &kp F7   &kp F8   &none              &bt BT_DISC 0  &bt BT_DISC 1   &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &sys_reset
&none   &kp F9  &kp F10  &kp F11  &kp F12  &none              &bt BT_CLR     &bt BT_CLR_ALL  &bt BT_NXT     &bt BT_PRV     &none          &none
&trans  &trans  &trans   &trans   &trans              &trans  &mo 5                                                                       &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };
    };
};
